<project name="Template" default="build.dev">

  <target name="build.dev" depends="
      clean,
      init,
      concatenateJS,
      concatenateCSS,
      bakeDev,
      deployToDev">
  </target>

  <target name="build.release" depends="
      clean,
      init,
      validateJS,
      concatenateJS,
      test,
      minifyJS,
      validateCSS,
      concatenateCSS,
      minifyCSS,
      bakePublic,
      document,
      deployToPublic">
  </target>

  <loadproperties srcfile="build.properties" />

  <loadfile property="license" srcfile="license.txt" />

  <tstamp>
    <format property="build.time"
            pattern="MMMM d, yyyy hh:mm:ss"
            locale="en,US"/>
  </tstamp>

  <!-- Check if build folder exists -->
  <target name="checkBuild">
    <condition property="cleandir">
      <available file="${build.dir}" type="dir"/>
    </condition>
  </target>

  <!-- Delete all files not inside /build/backup -->
  <target name="cleanBuild" depends="checkBuild" if="cleandir">
    <delete>
      <fileset dir="${build.dir}" includes="**/*.js" excludes="backup/**/*.js">
      </fileset>
    </delete>
  </target>

  <!-- Remove entire folders -->
  <target name="clean" depends="cleanBuild">
    <delete dir="${jsdoc.output}"/>
  </target>

  <!-- Create folders for build, backup, and doc files. -->
  <target name="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dir}/backup"/>
    <mkdir dir="${cssBuild.dir}/backup"/>
    <mkdir dir="${jsdoc.output}"/>
    <script language="javascript">
      var buildName = project.getProperty("buildName")
      project.setProperty("buildNameLower", buildName.toLowerCase());
    </script>
    <echo message="${buildNameLower}"/>
  </target>

  <!-- Validate via jshint -->
  <target name="validateJS">
    <apply executable="java" failonerror="true" parallel="true">
      <fileset dir="${src.dir}" includes="**/*.js" />
      <arg line="-jar" />
      <arg path="${rhino}" />
      <arg path="${jshint}" />
      <srcfile/>
      <arg line="${jshint.options}" />
    </apply>
  </target>

  <!-- Validate via csslint -->
  <target name="validateCSS">
    <apply executable="java" failonerror="true" parallel="true">
      <fileset dir="${cssSrc.dir}" includes="**/*.css" />
      <arg line="-jar" />
      <arg path="${rhino}" />
      <arg path="${csslint}" />
      <arg line="--${csslint.ignore}" />
      <srcfile/>
    </apply>
  </target>

  <!-- Concatenate -->
  <target name="concatenateJS">
    <concat destfile="${build.dir}/${buildNameLower}.js" fixlastline="yes" eol="lf">
      <header trimleading="yes">/*
        %PROJECTNAME%
        ${license}
        */
        /* Version: %VERSION% */
        /* Build time: ${build.time} */
        /** @namespace */
        var ${buildName} = {}, exports = ${buildName};

        (function(exports) {
        'use strict';
      </header>
      <fileset dir="${src.dir}" includes="**/*.js" />
      <footer trimleading="yes">}(exports));</footer>
    </concat>
  </target>

  <!-- Test via PhantomJS-->
  <target name="test">
    <!-- copy fat build file to tests/lib -->
    <copy file="${build.dir}/${buildNameLower}.js" todir="${tests.dir}/lib" overwrite="true"/>
    <exec executable="${phantomjs}" failonerror="true">
      <arg path="${phantomjs.driver}" />
      <arg path="${phantomjs.tests}" />
    </exec>
  </target>

  <!-- Minify -->
  <target name="minifyJS">
    <apply executable="java" failonerror="true">
      <fileset dir="${build.dir}" includes="*.js" excludes="*.raw.min.js"/>
      <mapper type="glob" from="*.js" to="${build.dir}/*.raw.min.js"/>

      <arg line="-jar"/>
      <arg path="${closure}"/>
      <arg line="${closure.options}"/>

      <arg line="--js"/>
      <srcfile/>

      <arg line="--js_output_file"/>
      <targetfile/>
    </apply>
  </target>

  <!-- ConcatenateCSS -->
  <target name="concatenateCSS">
    <concat destfile="${cssBuild.dir}/${buildNameLower}.css" fixlastline="yes" eol="lf">
      <header trimleading="yes">/*
        %PROJECTNAME%
        ${license}
        */
        /* Version: %VERSION% */
        /* Build time: ${build.time} */
      </header>
      <!-- using filelist here; order will probably matter -->
      <filelist dir="${cssSrc.dir}">
        <file name="main.css" />
        <file name="type.css" />
      </filelist>
    </concat>
  </target>

  <!-- MinifyCSS -->
  <target name="minifyCSS">
    <copy file="${cssBuild.dir}/${buildNameLower}.css" tofile="${cssBuild.dir}/${buildNameLower}.raw.min.css" overwrite="true"/>
    <fileset id="css.fileset" dir="${cssBuild.dir}" includes="${buildNameLower}.raw.min.css" />
    <!-- remove comments -->
    <replaceregexp match="/\*.*\*/" replace="" flags="g" byline="true">
      <fileset refid="css.fileset"/>
    </replaceregexp>
    <replaceregexp match="/\*.+?\*/" replace="" flags="gs" byline="false">
      <fileset refid="css.fileset"/>
    </replaceregexp>
    <!-- remove whitespace -->
    <replaceregexp match="\s+" replace=" " flags="g" byline="true">
      <fileset refid="css.fileset"/>
    </replaceregexp>
    <replaceregexp match="^\s+" replace="" flags="g" byline="true">
      <fileset refid="css.fileset"/>
    </replaceregexp>
    <replaceregexp match="\s+$" replace="" flags="g" byline="true">
      <fileset refid="css.fileset"/>
    </replaceregexp>
    <!-- merge lines -->
    <replaceregexp match="\{[\n\r]+" replace="{" flags="g" byline="false">
      <fileset refid="css.fileset"/>
    </replaceregexp>
    <replaceregexp match="[\n\r]+\}" replace="}" flags="g" byline="false">
      <fileset refid="css.fileset"/>
    </replaceregexp>
    <replaceregexp match="[\n\r]+\{" replace="{" flags="g" byline="false">
      <fileset refid="css.fileset"/>
    </replaceregexp>
    <replaceregexp match=";[\n\r]+" replace=";" flags="g" byline="false">
      <fileset refid="css.fileset"/>
    </replaceregexp>
    <replaceregexp match=",[\n\r]+" replace="," flags="g" byline="false">
      <fileset refid="css.fileset"/>
    </replaceregexp>
    <replaceregexp match="([\n\r])[\n\r]+" replace="\1" flags="g" byline="false">
      <fileset refid="css.fileset"/>
    </replaceregexp>
  </target>

 <!-- jsDoc -->
  <target name="document">
    <delete dir="${jsdoc.output}"/>
    <mkdir dir="${jsdoc.output}"/>
    <apply executable="java" failonerror="true" parallel="true">
      <fileset dir="${src.dir}" includes="**/*.js"/>
      <arg line="-jar"/>
      <arg path="${jsdoc}"/>
      <arg path="${jsdoc.run}"/>
      <arg line="-t=${jsdoc.templates}"/>
      <arg line="-d=${jsdoc.output}"/>
      <srcfile/>
    </apply>
  </target>

  <!-- Bake for development: the final step -->
  <target name="bakeDev">
    <!-- Searches for %VERSION% in the build directory and replaces with -->
    <!-- the version number found in build.properties. -->
    <replaceregexp match="%VERSION%" replace="${version}" flags="g" byline="true">
      <fileset dir="${build.dir}" includes="**/*"/>
      <fileset dir="${cssBuild.dir}" includes="**/*"/>
    </replaceregexp>
    <!-- Searches for %PROJECTNAME% in the build directory and replaces with the project name -->
    <replaceregexp match="%PROJECTNAME%" replace="${projectName}" flags="g" byline="true">
      <fileset dir="${build.dir}" includes="**/*"/>
      <fileset dir="${cssBuild.dir}" includes="**/*"/>
    </replaceregexp>
  </target>

  <!-- Bake for public: the final step -->
  <target name="bakePublic">
    <!-- JS - Adds the license to the raw minified file. -->
    <concat destfile="${build.dir}/${buildNameLower}.min.js" fixlastline="yes" eol="lf">
      <header trimleading="yes">/*
        %PROJECTNAME%
        ${license}
        */
        /* Version: %VERSION% */
        /* Build time: ${build.time} */

      </header>
      <filelist dir="${build.dir}" files="${buildNameLower}.raw.min.js"/>
      <footer trimleading="yes"></footer>
    </concat>
    <!-- CSS - Adds the license to the raw minified file. -->
    <concat destfile="${cssBuild.dir}/${buildNameLower}.min.css" fixlastline="yes" eol="lf">
      <header trimleading="yes">/*
        %PROJECTNAME%
        ${license}
        */
        /* Version: %VERSION% */
        /* Build time: ${build.time} */

      </header>
      <filelist dir="${cssBuild.dir}" files="${buildNameLower}.raw.min.css"/>
      <footer trimleading="yes"></footer>
    </concat>
    <!-- Searches for %VERSION% in the build directory and replaces with -->
    <!-- the version number found in build.properties. -->
    <replaceregexp match="%VERSION%" replace="${version}" flags="g" byline="true">
      <fileset dir="${build.dir}" includes="**/*"/>
      <fileset dir="${cssBuild.dir}" includes="**/*"/>
    </replaceregexp>
    <!-- Searches for %PROJECTNAME% in the build directory and replaces with the project name -->
    <replaceregexp match="%PROJECTNAME%" replace="${projectName}" flags="g" byline="true">
      <fileset dir="${build.dir}" includes="**/*"/>
      <fileset dir="${cssBuild.dir}" includes="**/*"/>
    </replaceregexp>
    <delete file="${build.dir}/${buildNameLower}.raw.min.js"/>
    <delete file="${cssBuild.dir}/${buildNameLower}.raw.min.css"/>
  </target>

  <!-- Copy: copy fat build and css files to /dev -->
  <target name="deployToDev">
    <!-- copy fat js file to backup folder with version number -->
    <copy file="${build.dir}/${buildNameLower}.js" tofile="${build.dir}/backup/${buildNameLower}.${version}.js" overwrite="true"/>
    <!-- copy fat js file to /dev/scripts -->
    <copy file="${build.dir}/${buildNameLower}.js" todir="${dev.dir}/scripts" overwrite="true"/>
    <!-- copy fat css file to backup folder with version number -->
    <copy file="${cssBuild.dir}/${buildNameLower}.css" tofile="${cssBuild.dir}/backup/${buildNameLower}.${version}.css" overwrite="true"/>
    <!-- copy fat css file to /dev/css -->
    <copy file="${cssBuild.dir}/${buildNameLower}.css" todir="${dev.dir}/css" overwrite="true"/>
    <!-- copy fat js file to tests/lib/ -->
    <copy file="${build.dir}/${buildNameLower}.js" todir="${tests.dir}/lib" overwrite="true"/>
  </target>

  <!-- Copy: copy minified build and css files to /public -->
  <target name="deployToPublic">
    <!-- copy fat js file to backup folder with version number -->
    <copy file="${build.dir}/${buildNameLower}.js" tofile="${build.dir}/backup/${buildNameLower}.${version}.js" overwrite="true"/>
    <!-- copy min js file to backup folder with version number -->
    <copy file="${build.dir}/${buildNameLower}.min.js" tofile="${build.dir}/backup/${buildNameLower}.min.${version}.js" overwrite="true"/>
    <!-- copy fat js file to dev/scripts -->
    <copy file="${build.dir}/${buildNameLower}.js" todir="${dev.dir}/scripts" overwrite="true"/>
    <!-- copy min js file to public/scripts -->
    <copy file="${build.dir}/${buildNameLower}.min.js" todir="${public.dir}/scripts" overwrite="true"/>

    <!-- copy fat css file to backup folder with version number -->
    <copy file="${cssBuild.dir}/${buildNameLower}.css" tofile="${cssBuild.dir}/backup/${buildNameLower}.${version}.css" overwrite="true"/>
    <!-- copy min css file to backup folder with version number -->
    <copy file="${cssBuild.dir}/${buildNameLower}.min.css" tofile="${cssBuild.dir}/backup/${buildNameLower}.min.${version}.css" overwrite="true"/>
    <!-- copy fat css file to /dev/css -->
    <copy file="${cssBuild.dir}/${buildNameLower}.css" todir="${dev.dir}/css" overwrite="true"/>
    <!-- copy css file to public/css -->
    <copy file="${cssBuild.dir}/${buildNameLower}.min.css" todir="${public.dir}/css" overwrite="true"/>
    <!-- copy fat js file to tests/lib/ -->
    <copy file="${build.dir}/${buildNameLower}.js" todir="${tests.dir}/lib" overwrite="true"/>
  </target>

</project>